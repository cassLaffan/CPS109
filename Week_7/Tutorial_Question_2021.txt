'''
Write an employee class. This class will contain four key pieces of data: employee name, employee number, employee
position AND employee birthday. The birthday will be set to a default string of "1 Jan 1999". 


Then, write two methods. First, one which gives them a promotion, that changes their position. Second, which changes their
birthday.

class employee:
    def __init__(self, employee_name, employee_num, employee_pos):
        # Your code goes here
    
    def promotion(self, new_position):
        # Your code goes here.

    def set_birthday(self, birthday):
        # Your code goes here.

Then, write a function that checks to see if the name of an employee is the same as a different employee
(so their name is the same but their employee number is different). This will not be a class method, but its
own function. If they're the same name but different employee numbers, change the first employee number to the
second employee number and return it.

def check_employee(emp_one, emp_two):
    # Your code goes here.

Example Input main:
if __name__ == "__main__":
    pretending_jim = employee("Dwight", 69, "Assistant to the Regional Manager")
    scranton_strangler = employee("Toby", 13, "HR")
    real_dwight = employee("Dwight", 42, "Assistant to the Regional Manager")
    print('"Dwight"s employee number:', pretending_jim.employee_num)
    print('Should be None:', check_employee(pretending_jim, scranton_strangler))
    print('"Dwight"s employee number:', check_employee(pretending_jim, real_dwight))
    print('"Dwight"s employee number:', pretending_jim.employee_num)
    print("Dwight's Position:", real_dwight.employee_pos)
    real_dwight.promotion("Assistant Regional Manager")
    print("Dwight's Position:", real_dwight.employee_pos)
    print("Dwight's Birthday:", real_dwight.birthday)
    real_dwight.set_birthday("8 May 1945")
    print("Dwight's Birthday:", real_dwight.birthday)

Example Output:
"Dwight"s employee number: 69
Should be None: None
"Dwight"s employee number: 42
"Dwight"s employee number: 42
Dwight's Position: Assistant to the Regional Manager
Dwight's Position: Assistant Regional Manager
Dwight's Birthday: 1 Jan 1999
Dwight's Birthday: 8 May 1945

*** Optional Bonus Question (NOT for marks - only do for interest if time!) ***

I want YOU for Teletubby Destroyer army.

Don't be fooled by their fluffy bodies and cute names, these creatures are highly dangerous and must be exorcised
on sight. Their evil scientists have developed advanced brainwashing techniques, and soon the whole world will be
tubby-fied, unless YOU act now. Call the .recruitment() function now to sign up.

Looking for able-bodied persons, of any employee number, name, and position - but NO "Teletubby Sympathizers" allowed!


Add a recruitment function to your employee class that performs the following behaviour:
If an employee has a current employee position of anything except "Teletubby Sympathizer", promote them to "Soldier of Humankind"
via the promotion function.
However, if an employee is a "Teletubby Sympathizer", promote them to "Terminated". :)

Example Input main:
if __name__ == "__main__":
    soldier_candidate_1 = employee("Aniki", 7141969, "Inspiration")
    soldier_candidate_2 = employee("Rick Astley", 2061966, "Motivational Speaker")
    soldier_candidate_3 = employee("TinkyWinkyLover", 5318008, "Teletubby Sympathizer")
    print(soldier_candidate_1.employee_name, "is an", soldier_candidate_1.employee_pos)
    soldier_candidate_1.recruitment()
    print(soldier_candidate_1.employee_name, "is a", soldier_candidate_1.employee_pos)
    soldier_candidate_3.recruitment()
    print(soldier_candidate_3.employee_name, "is", soldier_candidate_3.employee_pos)

Example Output:
Aniki is an Inspiration
Aniki is a Soldier of Humankind
TinkyWinkyLover is Terminated
'''